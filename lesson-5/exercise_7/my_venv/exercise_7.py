# -*- coding: utf-8 -*-
# !/usr/bin/env python3

"""
Всё, как в задании 6, но, если пользователь ввел адрес хоста, а не адрес сети, надо преобразовать адрес хоста в адрес
сети и вывести адрес сети и маску, как в задании 6.

Пример адреса сети (все биты хостовой части равны нулю):
• 10.0.1.0/24
• 190.1.0.0/16

Пример адреса хоста:
• 10.0.1.1/24 - хост из сети 10.0.1.0/24
• 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:
Network:
10       0        1        0
00001010 00000000 00000001 00000000
Mask:
/24
255      255      255      0
11111111 11111111 11111111 00000000

Проверить работу скрипта на разных комбинациях хост/маска, например: 10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит адреса хоста + 4 ноля. То есть,
например, адрес хоста 10.1.1.195/28 в двоичном формате будет bin_ip = "00001010000000010000000111000011".
А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего в адресе может быть 32 бита, а 32 - 28 = 4):
00001010000000010000000111000000
Ограничение: Все задания надо выполнять используя только пройденные темы.
"""

network = input('Введите IP-сеть в формате: A.B.C.D/L: ')

ip_dec,length = network.split('/')
length = int(length)

octets = ip_dec.split('.')

ip_bin = '{:08b}{:08b}{:08b}{:08b}'.format(int(octets[0]),int(octets[1]),int(octets[2]),int(octets[3]))

net_bin = ip_bin[:length] + '0' * (32-length)

net_dec_1 = int(int(net_bin[0:8],  2))
net_dec_2 = int(int(net_bin[8:16], 2))
net_dec_3 = int(int(net_bin[16:24],2))
net_dec_4 = int(int(net_bin[24:32],2))

mask_bin = '1' * length + '0' * (32-length)

mask_dec_1 = int(int(mask_bin[0:8],  2))
mask_dec_2 = int(int(mask_bin[8:16], 2))
mask_dec_3 = int(int(mask_bin[16:24],2))
mask_dec_4 = int(int(mask_bin[24:32],2))



template_ip = '''
Network:
{:<8} {:<8} {:<8} {:<8}
{:08b} {:08b} {:08b} {:08b}'''

template_mask = '''
Mask:
/{}
{:<8} {:<8} {:<8} {:<8}
{:08b} {:08b} {:08b} {:08b}'''


print(template_ip.format(net_dec_1,net_dec_2,net_dec_3,net_dec_4,
                         net_dec_1,net_dec_2,net_dec_3,net_dec_4))

print(template_mask.format(length,mask_dec_1,mask_dec_2,mask_dec_3,mask_dec_4,
                                  mask_dec_1,mask_dec_2,mask_dec_3,mask_dec_4))